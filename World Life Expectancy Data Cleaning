-- world life expectancy data cleaning Project 

SELECT * 
FROM world_life_expectancy;

# can see missing data in status and life expetancy columns 

# Step 1 remove duplicates / find out if we have duplicates

SELECT Country, Year, CONCAT(Country,Year) 
FROM world_life_expectancy;
# As no unique ID coloum is present we can use concat to combine 2 coloumns into 1 unique one to help identify duplicates

SELECT Country, Year, CONCAT(Country,Year), COUNT(CONCAT(Country,Year))  #Count concat to identify any rows with duplicates
FROM world_life_expectancy
GROUP BY Country, Year, CONCAT(Country,Year)
HAVING COUNT(CONCAT(Country,Year)) > 1 
;
# Now to remove duplicates, we need to indentify the duplicate row IDs - can use partition by

SELECT ROW_ID, CONCAT(Country,Year),
ROW_NUMBER() OVER(PARTITION BY CONCAT(Country,Year) ORDER BY CONCAT(Country,Year)) AS Row_Num
FROM world_life_expectancy;
 # This bring ups a table which includes row_ID and the duplicates - we need to use this as our subquery 
 
SELECT *
FROM(
SELECT ROW_ID, 
CONCAT(Country,Year),
ROW_NUMBER() OVER(PARTITION BY CONCAT(Country,Year) ORDER BY CONCAT(Country,Year)) AS Row_Num
FROM world_life_expectancy) AS Row_Table
WHERE Row_Num > 1 			#Now we can filter on our subquery to select the duplicates and identify the ROW_IDs
;
# The result selects all ROW_ids with more than 1 Row_Num

#NOW we can delete the data but also make sure we have a backup unaltered table before we delete anything

DELETE FROM world_life_expectancy
WHERE Row_ID IN (
SELECT Row_ID
FROM(
SELECT ROW_ID, 
CONCAT(Country,Year),
ROW_NUMBER() OVER(PARTITION BY CONCAT(Country,Year) ORDER BY CONCAT(Country,Year)) AS Row_Num
FROM world_life_expectancy) AS Row_Table
WHERE Row_Num > 1 )	
;
# Now Rows are deleted and we can check by running the previous sript

#Missing Data in Status column - need to identifty rows with blanks instead of NULLS

SELECT *
FROM world_life_expectancy
WHERE Status = '' 
;


SELECT *
FROM world_life_expectancy
WHERE Status IS NULL 
;

SELECT *
FROM world_life_expectancy
WHERE Status <> '' 
;
#From this we can see status is either 'Developing' Or 'Developed' 

SELECT DISTINCT (Country)
FROM world_life_expectancy 
WHERE Status = 'Developing' 
# We can use this to when distinct country = developing then fill the blank with 'developing'

UPDATE world_life_expectancy 
SET Status = 'Developing' 
WHERE Country IN (SELECT DISTINCT (Country)
					FROM world_life_expectancy 
					WHERE Status = 'Developing' ) 
# This hasnt worked because 'we cannot specify target table using subqueries'
# To work around this...

UPDATE world_life_expectancy t1 
JOIN  world_life_expectancy t2	#Joining the table together allows us to filter based on the other table
ON t1.Country = t2.Country                   
SET t1.Status = 'Developing'     #set to 'Developing' 
WHERE t1.Status = ''               #Where T1 is blank  #Can also set this to 'NULL' if there were Nulls that needed changing
AND t2.Status <> '' 				#Where T2 isnt blank AND the country is the same
AND t2.status = 'Developing' 
;


UPDATE world_life_expectancy t1 
JOIN  world_life_expectancy t2	
ON t1.Country = t2.Country                   
SET t1.Status = 'Developed'     
WHERE t1.Status = ''             
AND t2.Status <> '' 				
AND t2.status = 'Developed' 
;

SELECT *
FROM world_life_expectancy
WHERE `Life expectancy` = '' 

# 2 values for life expectancy are missing, we can imputate the average of the previous 
# and consecutive years we can do this by joining the table to itself multuiple times and combining 

SELECT t1.Country, t1.Year, t1.`Life expectancy`,t2.Country, t2.Year, t2.`Life expectancy`
FROM world_life_expectancy t1 
JOIN world_life_expectancy t2 
	ON t1.Country = t2.Country
    AND t1.Year = t2.Year - 1 
;
 # ^ this code is the first part, we have joined the 2 tables and shifted life expectancy up by a year
 
 
SELECT t1.Country, t1.Year, t1.`Life expectancy`,
t2.Country, t2.Year, t2.`Life expectancy`,
t3.Country, t3.Year, t3.`Life expectancy`
FROM world_life_expectancy t1 
JOIN world_life_expectancy t2 
	ON t1.Country = t2.Country
    AND t1.Year = t2.Year - 1 
JOIN world_life_expectancy t3 
	ON t1.Country = t3.Country
    AND t1.Year = t3.Year + 1 
    WHERE t1.`Life expectancy` = ''  # This selects the blanks from Table 1 and the corresponding prev and following year
;

# Now we need to calculate the average life expectancy from t2 and t3 and populate it into T1 

SELECT t1.Country, t1.Year, t1.`Life expectancy`,
t2.Country, t2.Year, t2.`Life expectancy`,
t3.Country, t3.Year, t3.`Life expectancy`,
ROUND((t2.`Life expectancy` + t3.`Life expectancy`) / 2, 1) #ROUND is used to round up the resulting average to '1' decimal place 
FROM world_life_expectancy t1 
JOIN world_life_expectancy t2 
	ON t1.Country = t2.Country
    AND t1.Year = t2.Year - 1 
JOIN world_life_expectancy t3 
	ON t1.Country = t3.Country
    AND t1.Year = t3.Year + 1 
    WHERE t1.`Life expectancy` = ''  
    ;

# Now we have calulcated the average we can impute the data into the original table using UPDATE 

UPDATE world_life_expectancy t1 
JOIN world_life_expectancy t2 
	ON t1.Country = t2.Country
    AND t1.Year = t2.Year - 1 
JOIN world_life_expectancy t3 
	ON t1.Country = t3.Country
    AND t1.Year = t3.Year + 1 
SET t1.`Life expectancy` = ROUND((t2.`Life expectancy` + t3.`Life expectancy`) / 2, 1)
WHERE  t1.`Life expectancy` = ''
;

